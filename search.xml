<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Antd 父子组件表单提交</title>
    <url>/2021/03/01/Antd-%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E8%A1%A8%E5%8D%95%E6%8F%90%E4%BA%A4/</url>
    <content><![CDATA[<p>这两天弄了下父子组件提交的问题，这里整理下。</p>
<a id="more"></a>
<h1 id="父组件中，引入子组件，对子组件执行React-forwardRef-子组件）来获取传递给它的-ref"><a href="#父组件中，引入子组件，对子组件执行React-forwardRef-子组件）来获取传递给它的-ref" class="headerlink" title="父组件中，引入子组件，对子组件执行React.forwardRef(子组件）来获取传递给它的 ref"></a>父组件中，引入子组件，对子组件执行React.forwardRef(子组件）来获取传递给它的 ref</h1><p>配置子组件：<Child ref={React.useRef(null)} /></p>
<p>主要代码如下：</p>
<pre name="code" class="javascript">
const Child = forwardRef(FormItemTimeShedule);
{getFieldDecorator('scheduleList', {
    validateTrigger: ['onBlur'],
    rules: [
        {
            validator(_, value, callback) {
                value.some(item => {
                    const errorMessage = childRef.current.getValidateError(item);
                    if (errorMessage) {
                        callback(errorMessage);
                        return true;
                    }
                    return false;
                });
                callback();
            }
        }
    ],
    initialValue: relativeLinkData
})(<Child ref={React.useRef(null)} {...itemProps}/>)}
</pre>
<h1 id="子组件"><a href="#子组件" class="headerlink" title="子组件"></a>子组件</h1><p>定义const FormItemTimeShedule = ( props, childRef) =&gt; {….}<br>使用useImperativeHandle定义暴露给父组件的参数；<br>  useImperativeHandle(childRef,()=&gt;(<br>    getValidateError<br>  }))</p>
<p>//执行校验</p>
<pre name="code" class="javascript">
const getValidateError = item => {
    let msg;
    validators.some(item => {
        if (!item.validator(startTime)) {
            msg = item.message;
            return true;
        }
        return false;
    });
    return msg;
};
</pre>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>主要还是卡在forwardRef和useImperativeHandle这里，注意React版本是16以上，我是写的函数式组件。</p>
]]></content>
  </entry>
  <entry>
    <title>Java Exception体系</title>
    <url>/2021/01/01/Java-Exception%E4%BD%93%E7%B3%BB/</url>
    <content><![CDATA[<h1 id="先看下Java异常处理类体系"><a href="#先看下Java异常处理类体系" class="headerlink" title="先看下Java异常处理类体系"></a>先看下Java异常处理类体系</h1><p><img src="/images/throwable.png" alt="throwable"><br>主要分不可恢复的Error类，和异常类exception。Exception又分为checked和unchecked Exception，通俗的讲就是分编译器检查异常类和非编译器检查类，Exception的子类除RuntimeException以外都是checked Exception, RuntimeException的子类都是unchecked Exception；</p>
<a id="more"></a>

<h1 id="Java-Exception-关键字"><a href="#Java-Exception-关键字" class="headerlink" title="Java Exception 关键字"></a>Java Exception 关键字</h1><p>涉及五个关键字：try， catch， finally， throw， throws，一一解释下<br>try是指定我们需要捕捉异常的代码块；<br>catch是处理捕捉的异常；<br>finally是执行关键代码；<br>throw是抛出异常；<br>throws是定义异常，和try catch写法作用一样；</p>
<h1 id="throw和throws区别"><a href="#throw和throws区别" class="headerlink" title="throw和throws区别"></a>throw和throws区别</h1><p><img src="/images/different_throw_and_throws.png" alt="Throw"></p>
<p>参考：<a href="https://www.javatpoint.com/difference-between-throw-and-throws-in-java">https://www.javatpoint.com/difference-between-throw-and-throws-in-java</a><br>以上内容参考：<a href="https://www.javatpoint.com/exception-handling-in-java">https://www.javatpoint.com/exception-handling-in-java</a></p>
]]></content>
  </entry>
  <entry>
    <title>deadlock</title>
    <url>/2021/04/13/deadlock/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>mysql</title>
    <url>/2021/03/09/mysql/</url>
    <content><![CDATA[<h1 id="Mysql相关知识"><a href="#Mysql相关知识" class="headerlink" title="Mysql相关知识"></a>Mysql相关知识</h1><h1 id="Mysql-引擎MyISAM和InnoDB区别"><a href="#Mysql-引擎MyISAM和InnoDB区别" class="headerlink" title="Mysql 引擎MyISAM和InnoDB区别"></a>Mysql 引擎MyISAM和InnoDB区别</h1><p>MyISAM是MySQL的默认数据库引擎（5.5版之前），由早期的ISAM（Indexed Sequential Access Method：有索引的顺序访问方法）所改良。虽然性能极佳，但却有一个缺点：不支持事务处理（transaction）。不过，在这几年的发展下，MySQL也导入了InnoDB（另一种数据库引擎），以强化参考完整性与并发违规处理机制，后来就逐渐取代MyISAM。</p>
<a id="more"></a>

<p>InnoDB，是MySQL的数据库引擎之一，为MySQL AB发布binary的标准之一。InnoDB由Innobase Oy公司所开发，2006年五月时由甲骨文公司并购。与传统的ISAM与MyISAM相比，InnoDB的最大特色就是支持了ACID兼容的事务（Transaction）功能，类似于PostgreSQL。目前InnoDB采用双轨制授权，一是GPL授权，另一是专有软件授权。</p>
<p>MyISAM与InnoDB的区别是什么？<br>1、 存储结构<br>MyISAM：每个MyISAM在磁盘上存储成三个文件。第一个文件的名字以表的名字开始，扩展名指出文件类型。.frm文件存储表定义。数据文件的扩展名为.MYD (MYData)。索引文件的扩展名是.MYI (MYIndex)。<br>InnoDB：所有的表都保存在同一个数据文件中（也可能是多个文件，或者是独立的表空间文件），InnoDB表的大小只受限于操作系统文件的大小，一般为2GB。</p>
<p>2、 存储空间<br>MyISAM：可被压缩，存储空间较小。支持三种不同的存储格式：静态表(默认，但是注意数据末尾不能有空格，会被去掉)、动态表、压缩表。<br>InnoDB：需要更多的内存和存储，它会在主内存中建立其专用的缓冲池用于高速缓冲数据和索引。</p>
<p>3、 可移植性、备份及恢复<br>MyISAM：数据是以文件的形式存储，所以在跨平台的数据转移中会很方便。在备份和恢复时可单独针对某个表进行操作。<br>InnoDB：免费的方案可以是拷贝数据文件、备份 binlog，或者用 mysqldump，在数据量达到几十G的时候就相对痛苦了。</p>
<p>4、 事务支持<br>MyISAM：强调的是性能，每次查询具有原子性,其执行数度比InnoDB类型更快，但是不提供事务支持。<br>InnoDB：提供事务支持事务，外部键等高级数据库功能。 具有事务(commit)、回滚(rollback)和崩溃修复能力(crash recovery capabilities)的事务安全(transaction-safe (ACID compliant))型表。</p>
<p>5、 AUTO_INCREMENT<br>MyISAM：可以和其他字段一起建立联合索引。引擎的自动增长列必须是索引，如果是组合索引，自动增长可以不是第一列，他可以根据前面几列进行排序后递增。<br>InnoDB：InnoDB中必须包含只有该字段的索引。引擎的自动增长列必须是索引，如果是组合索引也必须是组合索引的第一列。</p>
<p>6、 表锁差异<br>MyISAM：只支持表级锁，用户在操作myisam表时，select，update，delete，insert语句都会给表自动加锁，如果加锁以后的表满足insert并发的情况下，可以在表的尾部插入新的数据。<br>InnoDB：支持事务和行级锁，是innodb的最大特色。行锁大幅度提高了多用户并发操作的新能。但是InnoDB的行锁，只是在WHERE的主键是有效的，非主键的WHERE都会锁全表的。</p>
<p>7、 全文索引<br>MyISAM：支持 FULLTEXT类型的全文索引<br>InnoDB：不支持FULLTEXT类型的全文索引，但是innodb可以使用sphinx插件支持全文索引，并且效果更好。</p>
<p>8、 表主键<br>MyISAM：允许没有任何索引和主键的表存在，索引都是保存行的地址。<br>InnoDB：如果没有设定主键或者非空唯一索引，就会自动生成一个6字节的主键(用户不可见)，数据是主索引的一部分，附加索引保存的是主索引的值的数据列。</p>
<p>9、 表的具体行数<br>MyISAM：保存有表的总行数，如果select count() from table;会直接取出出该值。<br>InnoDB：没有保存表的总行数，如果使用select count() from table；就会遍历整个表，消耗相当大，但是在加了wehre条件后，myisam和innodb处理的方式都一样。</p>
<p>10、 CURD操作<br>MyISAM：如果执行大量的SELECT，MyISAM是更好的选择。<br>InnoDB：如果你的数据执行大量的INSERT或UPDATE，出于性能方面的考虑，应该使用InnoDB表。DELETE 从性能上InnoDB更优，但DELETE FROM table时，InnoDB不会重新建立表，而是一行一行的删除，在innodb上如果要清空保存有大量数据的表，最好使用truncate table这个命令。</p>
<p>11、 外键<br>MyISAM：不支持<br>InnoDB：支持<br>通过上述的分析，基本上可以考虑使用InnoDB来替代MyISAM引擎了，原因是InnoDB自身很多良好的特点，比如事务支持、存储 过程、视图、行级锁定等等，在并发很多的情况下，相信InnoDB的表现肯定要比MyISAM强很多。另外，任何一种表都不是万能的，只用恰当的针对业务类型来选择合适的表类型，才能最大的发挥MySQL的性能优势。如果不是很复杂的Web应用，非关键应用，还是可以继续考虑MyISAM的，这个具体情况可以自己斟酌。</p>
<p>存储引擎选择的基本原则</p>
<p>采用MyISAM引擎</p>
<p>R/W &gt; 100:1 且update相对较少<br>并发不高<br>表数据量小<br>硬件资源有限<br>采用InnoDB引擎</p>
<p>R/W比较小，频繁更新大字段<br>表数据量超过1000万，并发高<br>安全性和可用性要求高<br>采用Memory引擎</p>
<p>有足够的内存<br>对数据一致性要求不高，如在线人数和session等应用<br>需要定期归档数据</p>
<h1 id="Mysql-执行顺序"><a href="#Mysql-执行顺序" class="headerlink" title="Mysql 执行顺序"></a>Mysql 执行顺序</h1><p><img src="/images/mysql-process.png" alt="Throw"></p>
]]></content>
  </entry>
</search>
